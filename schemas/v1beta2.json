{
  "type": "object",
  "definitions": {
    "Artifact": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactType"
        },
        {
          "properties": {
            "context": {
              "type": "string"
            },
            "image": {
              "type": "string"
            },
            "sync": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            }
          },
          "description": "Artifact represents items that need to be built, along with the context in which\nthey should be built.\n"
        }
      ]
    },
    "ArtifactType": {
      "properties": {
        "bazel": {
          "$ref": "#/definitions/BazelArtifact"
        },
        "docker": {
          "$ref": "#/definitions/DockerArtifact"
        },
        "jibGradle": {
          "$ref": "#/definitions/JibGradleArtifact"
        },
        "jibMaven": {
          "$ref": "#/definitions/JibMavenArtifact"
        }
      }
    },
    "BazelArtifact": {
      "properties": {
        "args": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "target": {
          "type": "string"
        }
      },
      "description": "BazelArtifact describes an artifact built with Bazel.\n"
    },
    "BuildConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/BuildType"
        },
        {
          "properties": {
            "artifacts": {
              "items": {
                "$ref": "#/definitions/Artifact"
              },
              "type": "array"
            },
            "tagPolicy": {
              "$ref": "#/definitions/TagPolicy"
            }
          },
          "description": "BuildConfig contains all the configuration for the build steps\n"
        }
      ]
    },
    "BuildType": {
      "properties": {
        "googleCloudBuild": {
          "$ref": "#/definitions/GoogleCloudBuild"
        },
        "kaniko": {
          "$ref": "#/definitions/KanikoBuild"
        },
        "local": {
          "$ref": "#/definitions/LocalBuild"
        }
      },
      "description": "BuildType contains the specific implementation and parameters needed\nfor the build step. Only one field should be populated.\n"
    },
    "DateTimeTagger": {
      "properties": {
        "format": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        }
      },
      "description": "DateTimeTagger contains the configuration for the DateTime tagger.\n"
    },
    "DeployConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/DeployType"
        }
      ]
    },
    "DeployType": {
      "properties": {
        "helm": {
          "$ref": "#/definitions/HelmDeploy"
        },
        "kubectl": {
          "$ref": "#/definitions/KubectlDeploy"
        },
        "kustomize": {
          "$ref": "#/definitions/KustomizeDeploy"
        }
      },
      "description": "DeployType contains the specific implementation and parameters needed\nfor the deploy step. Only one field should be populated.\n"
    },
    "DockerArtifact": {
      "properties": {
        "buildArgs": {
          "type": "object"
        },
        "cacheFrom": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "dockerfile": {
          "type": "string"
        },
        "target": {
          "type": "string"
        }
      },
      "description": "DockerArtifact describes an artifact built from a Dockerfile,\nusually using `docker build`.\n"
    },
    "EnvTemplateTagger": {
      "properties": {
        "template": {
          "type": "string"
        }
      },
      "description": "EnvTemplateTagger contains the configuration for the envTemplate tagger.\n"
    },
    "GitTagger": {
      "description": "GitTagger contains the configuration for the git tagger.\n"
    },
    "GoogleCloudBuild": {
      "properties": {
        "diskSizeGb": {
          "type": "number"
        },
        "dockerImage": {
          "type": "string"
        },
        "machineType": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        },
        "timeout": {
          "type": "string"
        }
      },
      "description": "GoogleCloudBuild contains the fields needed to do a remote build on\nGoogle Cloud Build.\n"
    },
    "HelmConventionConfig": {
      "description": "HelmConventionConfig represents image config in the syntax of image.repository and image.tag\n"
    },
    "HelmDeploy": {
      "properties": {
        "releases": {
          "items": {
            "$ref": "#/definitions/HelmRelease"
          },
          "type": "array"
        }
      },
      "description": "HelmDeploy contains the configuration needed for deploying with helm\n"
    },
    "HelmFQNConfig": {
      "properties": {
        "property": {
          "type": "string"
        }
      },
      "description": "HelmFQNConfig represents image config to use the FullyQualifiedImageName as param to set\n"
    },
    "HelmImageConfig": {
      "properties": {
        "fqn": {
          "$ref": "#/definitions/HelmFQNConfig"
        },
        "helm": {
          "$ref": "#/definitions/HelmConventionConfig"
        }
      }
    },
    "HelmImageStrategy": {
      "allOf": [
        {
          "$ref": "#/definitions/HelmImageConfig"
        }
      ]
    },
    "HelmPackaged": {
      "properties": {
        "appVersion": {
          "type": "string",
          "description": "AppVersion set the appVersion on the chart to this version\n"
        },
        "version": {
          "type": "string",
          "description": "Version sets the version on the chart to this semver version.\n"
        }
      },
      "description": "HelmPackaged represents parameters for packaging helm chart.\n"
    },
    "HelmRelease": {
      "properties": {
        "chartPath": {
          "type": "string"
        },
        "imageStrategy": {
          "$ref": "#/definitions/HelmImageStrategy"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "overrides": {
          "type": "object"
        },
        "packaged": {
          "$ref": "#/definitions/HelmPackaged"
        },
        "recreatePods": {
          "type": "boolean"
        },
        "setValueTemplates": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "setValues": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "values": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "valuesFiles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "version": {
          "type": "string"
        },
        "wait": {
          "type": "boolean"
        }
      }
    },
    "JibGradleArtifact": {
      "required": [
        "project"
      ],
      "properties": {
        "project": {
          "type": "string",
          "description": "Only multi-module\n"
        }
      }
    },
    "JibMavenArtifact": {
      "required": [
        "module",
        "profile"
      ],
      "properties": {
        "module": {
          "type": "string",
          "description": "Only multi-module\n"
        },
        "profile": {
          "type": "string"
        }
      }
    },
    "KanikoBuild": {
      "properties": {
        "buildContext": {
          "$ref": "#/definitions/KanikoBuildContext"
        },
        "cache": {
          "$ref": "#/definitions/KanikoCache"
        },
        "flags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "image": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "pullSecret": {
          "type": "string"
        },
        "pullSecretName": {
          "type": "string"
        },
        "timeout": {
          "type": "string"
        }
      },
      "description": "KanikoBuild contains the fields needed to do a on-cluster build using\nthe kaniko image\n"
    },
    "KanikoBuildContext": {
      "properties": {
        "gcsBucket": {
          "type": "string"
        },
        "localDir": {
          "$ref": "#/definitions/LocalDir"
        }
      },
      "description": "KanikoBuildContext contains the different fields available to specify\na kaniko build context\n"
    },
    "KanikoCache": {
      "properties": {
        "repo": {
          "type": "string"
        }
      },
      "description": "KanikoCache contains fields related to kaniko caching\n"
    },
    "KubectlDeploy": {
      "properties": {
        "flags": {
          "$ref": "#/definitions/KubectlFlags"
        },
        "manifests": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "remoteManifests": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "description": "KubectlDeploy contains the configuration needed for deploying with `kubectl apply`\n"
    },
    "KubectlFlags": {
      "properties": {
        "apply": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "delete": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "global": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "description": "KubectlFlags describes additional options flags that are passed on the command\nline to kubectl either on every command (Global), on creations (Apply)\nor deletions (Delete).\n"
    },
    "KustomizeDeploy": {
      "properties": {
        "flags": {
          "$ref": "#/definitions/KubectlFlags"
        },
        "path": {
          "type": "string"
        }
      },
      "description": "KustomizeDeploy contains the configuration needed for deploying with kustomize.\n"
    },
    "LocalBuild": {
      "properties": {
        "push": {
          "type": "boolean"
        },
        "useBuildkit": {
          "type": "boolean"
        },
        "useDockerCLI": {
          "type": "boolean"
        }
      },
      "description": "LocalBuild contains the fields needed to do a build on the local docker daemon\nand optionally push to a repository.\n"
    },
    "LocalDir": {
      "description": "LocalDir represents the local directory kaniko build context\n"
    },
    "Profile": {
      "properties": {
        "build": {
          "$ref": "#/definitions/BuildConfig"
        },
        "deploy": {
          "$ref": "#/definitions/DeployConfig"
        },
        "name": {
          "type": "string"
        },
        "test": {
          "$ref": "#/definitions/TestConfig"
        }
      },
      "description": "Profile is additional configuration that overrides default\nconfiguration when it is activated.\n"
    },
    "ShaTagger": {
      "description": "ShaTagger contains the configuration for the SHA tagger.\n"
    },
    "SkaffoldPipeline": {
      "required": [
        "apiVersion",
        "kind"
      ],
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "build": {
          "$ref": "#/definitions/BuildConfig"
        },
        "deploy": {
          "$ref": "#/definitions/DeployConfig"
        },
        "kind": {
          "type": "string"
        },
        "profiles": {
          "items": {
            "$ref": "#/definitions/Profile"
          },
          "type": "array"
        },
        "test": {
          "$ref": "#/definitions/TestConfig"
        }
      }
    },
    "TagPolicy": {
      "properties": {
        "dateTime": {
          "$ref": "#/definitions/DateTimeTagger"
        },
        "envTemplate": {
          "$ref": "#/definitions/EnvTemplateTagger"
        },
        "gitCommit": {
          "$ref": "#/definitions/GitTagger"
        },
        "sha256": {
          "$ref": "#/definitions/ShaTagger"
        }
      },
      "description": "TagPolicy contains all the configuration for the tagging step\n"
    },
    "TestCase": {
      "required": [
        "image"
      ],
      "properties": {
        "image": {
          "type": "string"
        },
        "structureTests": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "description": "TestCase is a struct containing all the specified test\nconfiguration for an image.\n"
    },
    "TestConfig": {
      "items": {
        "$ref": "#/definitions/TestCase"
      },
      "type": "array"
    }
  }
}