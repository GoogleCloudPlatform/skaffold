apiVersion: skaffold/v1alpha2
kind: Config
build:
  # tagPolicy determines how skaffold is going to tag your image
  # we provide a few strategies here, although you most likely won't need to care!
  # Valid values for tagPolicy are
  #
  # sha256 tags the image with the checksum of the built image (image id)
  # sha256: {}
  # gitCommit tags the image with the git commit of your current repository
  # gitCommit: {}
  # envTemplate tags the image with a configurable template string.
  # The template string must be in the golang text/template syntax: https://golang.org/pkg/text/template/
  # The template is compiled and executed against the current environment, with two automatic variables injected:
  #   - IMAGE_NAME: The name of the image being built, as supplied in the artifacts section
  #   - DIGEST: The digest of the newly built image.
  # envTemplate: - 
  #   template: "{{.RELEASE}}-{{.IMAGE_NAME}}"
  
  # tagPolicy:
  #   sha256: {}

  # artifacts is a list of the actual images you're going to be building
  # you can include as many as you want here.
  artifacts:
    # The name of the image we're going to build, the full reference to the built
    # image will be available later in the the deploy section
  - imageName: gcr.io/k8s-skaffold/skaffold-example
    # workspace is the path to your dockerfile context. Defaults to ".""
    workspace: ../examples/getting-started
    # docker: {} # Use this for custom Docker configuration
    docker: {}
      # Dockerfile location relative to workspace. Defaults to "Dockerfile"
      # dockerfilePath: Dockerfile

  # This next section is where you'll put your specific builder configuration.
  # Here, we're using a local builder, which simply builds using the host docker

  # If you're using minikube or Docker for Desktop, you can skip the push step
  # for even faster build and deploy cycles.
  # local: {} # Use this for minikube or Docker for Desktop configuration
  local: {}
    # Skaffold defers to your ~/.docker/config for authentication information
    # If you're using GCR, make sure that you have gcloud and
    # docker-credentials-helper-gcr configured correctly.
    #
    # gcloud components install docker-credential-gcr
    # docker-credential-gcr configure-docker
    # skipPush: true

# The deploy section has all the information needed to deploy. Along with build:
# it is a required section.
deploy:
  # We'll be deferring to kubectl for the deployment. The kubectl deployer uses
  # a client side `kubectl apply` to apply the manifests to the cluster. You'll
  # need a kubectl version installed that's compatible with your cluster.
  kubectl:
    # Manifests is a list of manifests to deploy from files
    manifests:
    # The path to where these manifests live.  path accepts a
    # filepath.Glob, so * can be used to deploy a whole folder.
    #
    # Examples:
    # project outside this repository
    # - /home/mrick/path/to/different/project/deploy/*
    #
    - ../examples/getting-started/k8s-*
    # RemoteManifests is a list of manifests to deploy from remote cluster
    remoteManifests:
    # The path to where these manifests live in remote kubernetes cluster
    #
    # Examples:
    # - deployment/web-app1
    # - namespace:deployment/web-app2
    #
